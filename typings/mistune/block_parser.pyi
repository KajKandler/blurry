"""
This type stub file was generated by pyright.
"""

import re
from .scanner import ScannerParser

_TRIM_4 = re.compile(r'^ {1,4}')
_EXPAND_TAB = re.compile(r'^( {0,3})\t', flags=re.M)
_INDENT_CODE_TRIM = re.compile(r'^ {1,4}', flags=re.M)
_BLOCK_QUOTE_TRIM = re.compile(r'^ {0,1}', flags=re.M)
_BLOCK_QUOTE_LEADING = re.compile(r'^ *>', flags=re.M)
_BLOCK_TAGS = 'address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'meta', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'section', 'source', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul'
_BLOCK_HTML_RULE6 = r'</?(?:' + '|'.join(_BLOCK_TAGS) + r')' r'(?: +|\n|/?>)[\s\S]*?' r'(?:\n{2,}|\n*$)'
_BLOCK_HTML_RULE7 = r'<(?!script|pre|style)([a-z][\w-]*)(?:' r' +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"|' r''' *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?''' r')*? */?>(?=\s*\n)[\s\S]*?(?:\n{2,}|\n*$)|' r'</(?!script|pre|style)[a-z][\w-]*\s*>(?=\s*\n)[\s\S]*?(?:\n{2,}|\n*$)'
_PARAGRAPH_SPLIT = re.compile(r'\n{2,}')
_LIST_BULLET = re.compile(r'^ *([\*\+-]|\d+[.)])')
class BlockParser(ScannerParser):
    scanner_cls = ...
    NEWLINE = ...
    DEF_LINK = ...
    AXT_HEADING = ...
    SETEX_HEADING = ...
    THEMATIC_BREAK = ...
    INDENT_CODE = ...
    FENCED_CODE = ...
    BLOCK_QUOTE = ...
    LIST_START = ...
    BLOCK_HTML = ...
    LIST_MAX_DEPTH = ...
    BLOCK_QUOTE_MAX_DEPTH = ...
    RULE_NAMES = ...
    def __init__(self) -> None:
        ...
    
    def parse_newline(self, m, state):
        ...
    
    def parse_thematic_break(self, m, state):
        ...
    
    def parse_indent_code(self, m, state):
        ...
    
    def parse_fenced_code(self, m, state):
        ...
    
    def tokenize_block_code(self, code, info, state):
        ...
    
    def parse_axt_heading(self, m, state):
        ...
    
    def parse_setex_heading(self, m, state):
        ...
    
    def tokenize_heading(self, text, level, state):
        ...
    
    def get_block_quote_rules(self, depth):
        ...
    
    def parse_block_quote(self, m, state):
        ...
    
    def get_list_rules(self, depth):
        ...
    
    def parse_list_start(self, m, state, string):
        ...
    
    def parse_list_item(self, text, depth, state, rules):
        ...
    
    @staticmethod
    def normalize_list_item_text(text):
        ...
    
    def parse_block_html(self, m, state):
        ...
    
    def parse_def_link(self, m, state):
        ...
    
    def parse_text(self, text, state):
        ...
    
    def parse(self, s, state, rules=...):
        ...
    
    def render(self, tokens, inline, state):
        ...
    


def expand_leading_tab(text):
    ...

