"""
This type stub file was generated by pyright.
"""

from .scanner import Matcher, ScannerParser

_NEW_LINES = ...
_BLANK_LINES = ...
_TRIM_4 = ...
_EXPAND_TAB = ...
_INDENT_CODE_TRIM = ...
_BLOCK_QUOTE_TRIM = ...
_BLOCK_QUOTE_LEADING = ...
_BLOCK_TAGS = ...
_BLOCK_HTML_RULE6 = ...
_BLOCK_HTML_RULE7 = ...
_PARAGRAPH_SPLIT = ...
_LIST_BULLET = ...
class BlockParser(ScannerParser):
    scanner_cls = Matcher
    NEWLINE = ...
    DEF_LINK = ...
    AXT_HEADING = ...
    SETEX_HEADING = ...
    THEMATIC_BREAK = ...
    INDENT_CODE = ...
    FENCED_CODE = ...
    BLOCK_QUOTE = ...
    LIST_START = ...
    BLOCK_HTML = ...
    LIST_MAX_DEPTH = ...
    BLOCK_QUOTE_MAX_DEPTH = ...
    RULE_NAMES = ...
    def __init__(self) -> None:
        ...
    
    def parse_newline(self, m, state): # -> dict[str, Unknown]:
        ...
    
    def parse_thematic_break(self, m, state): # -> dict[str, Unknown]:
        ...
    
    def parse_indent_code(self, m, state): # -> dict[str, str]:
        ...
    
    def parse_fenced_code(self, m, state): # -> dict[str, Unknown]:
        ...
    
    def tokenize_block_code(self, code, info, state): # -> dict[str, Unknown]:
        ...
    
    def parse_axt_heading(self, m, state): # -> dict[str, Unknown]:
        ...
    
    def parse_setex_heading(self, m, state): # -> dict[str, Unknown]:
        ...
    
    def tokenize_heading(self, text, level, state): # -> dict[str, Unknown]:
        ...
    
    def get_block_quote_rules(self, depth): # -> list[str]:
        ...
    
    def parse_block_quote(self, m, state): # -> dict[str, Unknown]:
        ...
    
    def get_list_rules(self, depth): # -> list[str]:
        ...
    
    def parse_list_start(self, m, state, string): # -> tuple[dict[str, Unknown], Unknown]:
        ...
    
    def parse_list_item(self, text, depth, state, rules): # -> dict[str, Unknown]:
        ...
    
    @staticmethod
    def normalize_list_item_text(text): # -> str:
        ...
    
    def parse_block_html(self, m, state): # -> dict[str, Unknown]:
        ...
    
    def parse_def_link(self, m, state): # -> None:
        ...
    
    def parse_text(self, text, state): # -> dict[str, Unknown] | list[Unknown]:
        ...
    
    def parse(self, s, state, rules=...): # -> list[Unknown]:
        ...
    
    def render(self, tokens, inline, state):
        ...
    


def cleanup_lines(s): # -> str:
    ...

def expand_leading_tab(text): # -> str:
    ...

