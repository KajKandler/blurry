"""
This type stub file was generated by pyright.
"""

from .scanner import ScannerParser

HTML_TAGNAME = ...
HTML_ATTRIBUTES = ...
ESCAPE_CHAR = ...
LINK_TEXT = ...
LINK_LABEL = ...
class InlineParser(ScannerParser):
    ESCAPE = ...
    AUTO_LINK = ...
    STD_LINK = ...
    REF_LINK = ...
    REF_LINK2 = ...
    ASTERISK_EMPHASIS = ...
    UNDERSCORE_EMPHASIS = ...
    CODESPAN = ...
    LINEBREAK = ...
    INLINE_HTML = ...
    RULE_NAMES = ...
    def __init__(self, renderer, hard_wrap=...) -> None:
        ...
    
    def parse_escape(self, m, state): # -> tuple[Literal['text'], Unknown]:
        ...
    
    def parse_auto_link(self, m, state): # -> tuple[Literal['text'], Unknown] | tuple[Literal['link'], str | Unknown, Unknown]:
        ...
    
    def parse_std_link(self, m, state): # -> tuple[Literal['image'], str | Unknown, Unknown, str | Unknown] | tuple[Literal['text'], Unknown] | tuple[Literal['link'], str | Unknown, Unknown, str | Unknown]:
        ...
    
    def parse_ref_link(self, m, state): # -> list[Unknown] | tuple[Literal['image'], str | Unknown, Unknown, str | Unknown] | tuple[Literal['text'], Unknown] | tuple[Literal['link'], str | Unknown, Unknown, str | Unknown]:
        ...
    
    def parse_ref_link2(self, m, state): # -> list[Unknown] | tuple[Literal['image'], str | Unknown, Unknown, str | Unknown] | tuple[Literal['text'], Unknown] | tuple[Literal['link'], str | Unknown, Unknown, str | Unknown]:
        ...
    
    def tokenize_link(self, line, link, text, title, state): # -> tuple[Literal['text'], Unknown] | tuple[Literal['link'], str | Unknown, Unknown, Unknown]:
        ...
    
    def parse_asterisk_emphasis(self, m, state): # -> tuple[Literal['emphasis'], Unknown] | tuple[Literal['strong'], Unknown]:
        ...
    
    def parse_underscore_emphasis(self, m, state): # -> tuple[Literal['emphasis'], Unknown] | tuple[Literal['strong'], Unknown]:
        ...
    
    def tokenize_emphasis(self, m, state): # -> tuple[Literal['emphasis'], Unknown] | tuple[Literal['strong'], Unknown]:
        ...
    
    def parse_codespan(self, m, state): # -> tuple[Literal['codespan'], str]:
        ...
    
    def parse_linebreak(self, m, state): # -> tuple[Literal['linebreak']]:
        ...
    
    def parse_inline_html(self, m, state): # -> tuple[Literal['inline_html'], Unknown]:
        ...
    
    def parse_text(self, text, state): # -> tuple[Literal['text'], Unknown]:
        ...
    
    def parse(self, s, state, rules=...): # -> Generator[Unknown, None, None]:
        ...
    
    def render(self, s, state, rules=...):
        ...
    
    def __call__(self, s, state):
        ...
    


