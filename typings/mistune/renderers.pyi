"""
This type stub file was generated by pyright.
"""

class BaseRenderer:
    NAME = ...
    def __init__(self) -> None:
        ...
    
    def register(self, name, method): # -> None:
        ...
    
    def finalize(self, data):
        ...
    


class AstRenderer(BaseRenderer):
    NAME = ...
    def text(self, text): # -> dict[str, Unknown]:
        ...
    
    def link(self, link, children=..., title=...): # -> dict[str, Unknown]:
        ...
    
    def image(self, src, alt=..., title=...): # -> dict[str, Unknown]:
        ...
    
    def codespan(self, text): # -> dict[str, Unknown]:
        ...
    
    def linebreak(self): # -> dict[str, str]:
        ...
    
    def inline_html(self, html): # -> dict[str, Unknown]:
        ...
    
    def heading(self, children, level): # -> dict[str, Unknown]:
        ...
    
    def newline(self): # -> dict[str, str]:
        ...
    
    def thematic_break(self): # -> dict[str, str]:
        ...
    
    def block_code(self, children, info=...): # -> dict[str, Unknown]:
        ...
    
    def block_html(self, children): # -> dict[str, Unknown]:
        ...
    
    def list(self, children, ordered, level, start=...): # -> dict[str, Unknown]:
        ...
    
    def list_item(self, children, level): # -> dict[str, Unknown]:
        ...
    
    def finalize(self, data): # -> list[Unknown]:
        ...
    


class HTMLRenderer(BaseRenderer):
    NAME = ...
    HARMFUL_PROTOCOLS = ...
    def __init__(self, escape=..., allow_harmful_protocols=...) -> None:
        ...
    
    def text(self, text):
        ...
    
    def link(self, link, text=..., title=...):
        ...
    
    def image(self, src, alt=..., title=...):
        ...
    
    def emphasis(self, text):
        ...
    
    def strong(self, text):
        ...
    
    def codespan(self, text):
        ...
    
    def linebreak(self): # -> Literal['<br />\n']:
        ...
    
    def inline_html(self, html):
        ...
    
    def paragraph(self, text):
        ...
    
    def heading(self, text, level):
        ...
    
    def newline(self): # -> Literal['']:
        ...
    
    def thematic_break(self): # -> Literal['<hr />\n']:
        ...
    
    def block_text(self, text):
        ...
    
    def block_code(self, code, info=...):
        ...
    
    def block_quote(self, text):
        ...
    
    def block_html(self, html):
        ...
    
    def block_error(self, html):
        ...
    
    def list(self, text, ordered, level, start=...):
        ...
    
    def list_item(self, text, level):
        ...
    
    def finalize(self, data): # -> str:
        ...
    
    def _safe_url(self, url): # -> str:
        ...


